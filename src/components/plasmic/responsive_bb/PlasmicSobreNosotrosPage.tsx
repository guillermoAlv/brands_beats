// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wBcw9dcxKyU36yfsUviVdG
// Component: kdE_dd2jbPd
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import RoutesDialog from "../../RoutesDialog"; // plasmic-import: DFJFHCaPCd/component
import DialogClickableText from "../../DialogClickableText"; // plasmic-import: E4MwO2Nk-p/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: E1isZEegCA11/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_responsive_bb.module.css"; // plasmic-import: wBcw9dcxKyU36yfsUviVdG/projectcss
import * as sty from "./PlasmicSobreNosotrosPage.module.css"; // plasmic-import: kdE_dd2jbPd/css

export type PlasmicSobreNosotrosPage__VariantMembers = {};

export type PlasmicSobreNosotrosPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicSobreNosotrosPage__VariantsArgs;
export const PlasmicSobreNosotrosPage__VariantProps = new Array<VariantPropType>();

export type PlasmicSobreNosotrosPage__ArgsType = {
  routesDi?: React.ReactNode;
  headerRowA?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSobreNosotrosPage__ArgsType;
export const PlasmicSobreNosotrosPage__ArgProps = new Array<ArgPropType>(
  "routesDi",
  "headerRowA"
);

export type PlasmicSobreNosotrosPage__OverridesType = {
  root?: p.Flex<"div">;
  headerRow?: p.Flex<"div">;
  heroRow?: p.Flex<"div">;
  storesRow?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  footerRow?: p.Flex<"div">;
  routesDialog?: p.Flex<typeof RoutesDialog>;
};

export interface DefaultSobreNosotrosPageProps {
  routesDi?: React.ReactNode;
  headerRowA?: React.ReactNode;
  className?: string;
}

function PlasmicSobreNosotrosPage__RenderFunc(props: {
  variants: PlasmicSobreNosotrosPage__VariantsArgs;
  args: PlasmicSobreNosotrosPage__ArgsType;
  overrides: PlasmicSobreNosotrosPage__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__eIlmj)}>
        <div
          data-plasmic-name={"headerRow"}
          data-plasmic-override={overrides.headerRow}
          className={classNames(defaultcss.all, sty.headerRow)}
        >
          <div className={classNames(defaultcss.all, sty.box___5DwIc)}>
            <p.PlasmicSlot defaultContents={null} value={args.headerRowA} />
          </div>
        </div>

        <div
          data-plasmic-name={"heroRow"}
          data-plasmic-override={overrides.heroRow}
          className={classNames(defaultcss.all, sty.heroRow)}
        />

        <div
          data-plasmic-name={"storesRow"}
          data-plasmic-override={overrides.storesRow}
          className={classNames(defaultcss.all, sty.storesRow)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__iYxWg)}
          >
            <div className={classNames(defaultcss.all, sty.box__xkOZz)}>
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__q41R
                )}
              >
                {"Recibe nuevas marcas en tu buzón"}
              </div>
            </div>

            <div className={classNames(defaultcss.all, sty.box___4CClO)}>
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__kbjbc
                )}
              >
                {
                  "Nuestra newsletter incluye marcas que hacen cosas curiosas, utilizan materiales novedosos o innovan en la fabricación de sus productos"
                }
              </div>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              hasGap={true}
              className={classNames(defaultcss.all, sty.columns)}
            >
              <div className={classNames(defaultcss.all, sty.column___6Yd2)}>
                <div className={classNames(defaultcss.all, sty.box__aToF4)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__pG2N
                    )}
                  >
                    {"Escribe tu email"}
                  </div>
                </div>
              </div>

              <div className={classNames(defaultcss.all, sty.column___16AF)}>
                <div className={classNames(defaultcss.all, sty.box__pUhZx)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__qncQk
                    )}
                  >
                    {"Suscríbete"}
                  </div>
                </div>
              </div>
            </p.Stack>
          </p.Stack>
        </div>

        <div
          data-plasmic-name={"footerRow"}
          data-plasmic-override={overrides.footerRow}
          className={classNames(defaultcss.all, sty.footerRow)}
        />
      </div>

      <div className={classNames(defaultcss.all, sty.box__xpoU8)}>
        <p.PlasmicSlot
          defaultContents={
            <RoutesDialog
              data-plasmic-name={"routesDialog"}
              data-plasmic-override={overrides.routesDialog}
              className={classNames("__wab_instance", sty.routesDialog)}
            />
          }
          value={args.routesDi}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerRow",
    "heroRow",
    "storesRow",
    "columns",
    "footerRow",
    "routesDialog"
  ],
  headerRow: ["headerRow"],
  heroRow: ["heroRow"],
  storesRow: ["storesRow", "columns"],
  columns: ["columns"],
  footerRow: ["footerRow"],
  routesDialog: ["routesDialog"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerRow: "div";
  heroRow: "div";
  storesRow: "div";
  columns: "div";
  footerRow: "div";
  routesDialog: typeof RoutesDialog;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSobreNosotrosPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicSobreNosotrosPage__VariantsArgs;
  args?: PlasmicSobreNosotrosPage__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicSobreNosotrosPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicSobreNosotrosPage__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSobreNosotrosPage__ArgProps,
      internalVariantPropNames: PlasmicSobreNosotrosPage__VariantProps
    });

    return PlasmicSobreNosotrosPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSobreNosotrosPage";
  } else {
    func.displayName = `PlasmicSobreNosotrosPage.${nodeName}`;
  }
  return func;
}

export const PlasmicSobreNosotrosPage = Object.assign(
  // Top-level PlasmicSobreNosotrosPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerRow: makeNodeComponent("headerRow"),
    heroRow: makeNodeComponent("heroRow"),
    storesRow: makeNodeComponent("storesRow"),
    columns: makeNodeComponent("columns"),
    footerRow: makeNodeComponent("footerRow"),
    routesDialog: makeNodeComponent("routesDialog"),

    // Metadata about props expected for PlasmicSobreNosotrosPage
    internalVariantProps: PlasmicSobreNosotrosPage__VariantProps,
    internalArgProps: PlasmicSobreNosotrosPage__ArgProps
  }
);

export default PlasmicSobreNosotrosPage;
/* prettier-ignore-end */
