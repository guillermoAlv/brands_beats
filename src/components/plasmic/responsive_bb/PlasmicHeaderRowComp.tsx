// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wBcw9dcxKyU36yfsUviVdG
// Component: N1xWE1svjO
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeaderClickableText from "../../HeaderClickableText"; // plasmic-import: yLOYoxRMwJ/component
import ExpandRoutesButton from "../../ExpandRoutesButton"; // plasmic-import: Ra6hYxqoFV/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: E1isZEegCA11/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_responsive_bb.module.css"; // plasmic-import: wBcw9dcxKyU36yfsUviVdG/projectcss
import * as sty from "./PlasmicHeaderRowComp.module.css"; // plasmic-import: N1xWE1svjO/css

export type PlasmicHeaderRowComp__VariantMembers = {};

export type PlasmicHeaderRowComp__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeaderRowComp__VariantsArgs;
export const PlasmicHeaderRowComp__VariantProps = new Array<VariantPropType>();

export type PlasmicHeaderRowComp__ArgsType = {
  headerSearchBox?: React.ReactNode;
  subscribeButton?: React.ReactNode;
  aboutusButton?: React.ReactNode;
  faqButton?: React.ReactNode;
  contactButton?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHeaderRowComp__ArgsType;
export const PlasmicHeaderRowComp__ArgProps = new Array<ArgPropType>(
  "headerSearchBox",
  "subscribeButton",
  "aboutusButton",
  "faqButton",
  "contactButton"
);

export type PlasmicHeaderRowComp__OverridesType = {
  root?: p.Flex<"div">;
  headerSearch?: p.Flex<"div">;
  routes?: p.Flex<"div">;
  expandRoutesButton?: p.Flex<typeof ExpandRoutesButton>;
};

export interface DefaultHeaderRowCompProps {
  headerSearchBox?: React.ReactNode;
  subscribeButton?: React.ReactNode;
  aboutusButton?: React.ReactNode;
  faqButton?: React.ReactNode;
  contactButton?: React.ReactNode;
  className?: string;
}

function PlasmicHeaderRowComp__RenderFunc(props: {
  variants: PlasmicHeaderRowComp__VariantsArgs;
  args: PlasmicHeaderRowComp__ArgsType;
  overrides: PlasmicHeaderRowComp__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__pzqXj)}>
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__do8Rx
          )}
        >
          {"BRANDS"}
        </div>

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__dofYj
          )}
        >
          {"BEATS"}
        </div>
      </div>

      <div
        data-plasmic-name={"headerSearch"}
        data-plasmic-override={overrides.headerSearch}
        className={classNames(defaultcss.all, sty.headerSearch)}
      >
        <div className={classNames(defaultcss.all, sty.box__ps6AM)}>
          <p.PlasmicSlot defaultContents={null} value={args.headerSearchBox} />
        </div>
      </div>

      {(hasVariant(globalVariants, "screen", "mobile") ? false : true) ? (
        <div
          data-plasmic-name={"routes"}
          data-plasmic-override={overrides.routes}
          className={classNames(defaultcss.all, sty.routes)}
        >
          <p.PlasmicSlot
            defaultContents={
              <HeaderClickableText
                className={classNames(
                  "__wab_instance",
                  sty.headerClickableText__yMiCo
                )}
              />
            }
            value={args.subscribeButton}
          />

          <p.PlasmicSlot
            defaultContents={
              <HeaderClickableText
                className={classNames(
                  "__wab_instance",
                  sty.headerClickableText__rOkeF
                )}
                text={"Button text"}
              />
            }
            value={args.aboutusButton}
          />

          <div className={classNames(defaultcss.all, sty.box__bhy5Y)}>
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__rMtrX
              )}
            >
              {"AÃ±ade tu marca"}
            </div>
          </div>

          <p.PlasmicSlot
            defaultContents={
              <HeaderClickableText
                className={classNames(
                  "__wab_instance",
                  sty.headerClickableText__qV9A
                )}
                text={"Button text"}
              />
            }
            value={args.faqButton}
          />

          <p.PlasmicSlot
            defaultContents={
              <HeaderClickableText
                className={classNames(
                  "__wab_instance",
                  sty.headerClickableText__zqke4
                )}
                text={"Button text"}
              />
            }
            value={args.contactButton}
          />
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
        <ExpandRoutesButton
          data-plasmic-name={"expandRoutesButton"}
          data-plasmic-override={overrides.expandRoutesButton}
          className={classNames("__wab_instance", sty.expandRoutesButton)}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "headerSearch", "routes", "expandRoutesButton"],
  headerSearch: ["headerSearch"],
  routes: ["routes"],
  expandRoutesButton: ["expandRoutesButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerSearch: "div";
  routes: "div";
  expandRoutesButton: typeof ExpandRoutesButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeaderRowComp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicHeaderRowComp__VariantsArgs;
  args?: PlasmicHeaderRowComp__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicHeaderRowComp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicHeaderRowComp__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeaderRowComp__ArgProps,
      internalVariantPropNames: PlasmicHeaderRowComp__VariantProps
    });

    return PlasmicHeaderRowComp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeaderRowComp";
  } else {
    func.displayName = `PlasmicHeaderRowComp.${nodeName}`;
  }
  return func;
}

export const PlasmicHeaderRowComp = Object.assign(
  // Top-level PlasmicHeaderRowComp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerSearch: makeNodeComponent("headerSearch"),
    routes: makeNodeComponent("routes"),
    expandRoutesButton: makeNodeComponent("expandRoutesButton"),

    // Metadata about props expected for PlasmicHeaderRowComp
    internalVariantProps: PlasmicHeaderRowComp__VariantProps,
    internalArgProps: PlasmicHeaderRowComp__ArgProps
  }
);

export default PlasmicHeaderRowComp;
/* prettier-ignore-end */
