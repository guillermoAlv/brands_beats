// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDcLAAzBYxMBQFp3GHSHfW
// Component: -wbrW7NAWI5
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LogoText from "../../LogoText"; // plasmic-import: YZ5pqHoeK_/component
import HeaderSearchBar from "../../HeaderSearchBar"; // plasmic-import: RynG-Hop7u/component
import HeaderButton from "../../HeaderButton"; // plasmic-import: QjUfVEq5Go/component
import HeaderMenuButton from "../../HeaderMenuButton"; // plasmic-import: kpJaxtJ4t1/component
import ContentAboutus from "../../ContentAboutus"; // plasmic-import: cm3P6MJlYR/component
import Footer from "../../Footer"; // plasmic-import: rMsFEqx2mQ/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 5Lc4h9nwB5Z/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_brands_beats.module.css"; // plasmic-import: tDcLAAzBYxMBQFp3GHSHfW/projectcss
import * as sty from "./PlasmicLinkpage.module.css"; // plasmic-import: -wbrW7NAWI5/css

export type PlasmicLinkpage__VariantMembers = {};

export type PlasmicLinkpage__VariantsArgs = {};
type VariantPropType = keyof PlasmicLinkpage__VariantsArgs;
export const PlasmicLinkpage__VariantProps = new Array<VariantPropType>();

export type PlasmicLinkpage__ArgsType = {
  children?: React.ReactNode;
  children2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLinkpage__ArgsType;
export const PlasmicLinkpage__ArgProps = new Array<ArgPropType>(
  "children",
  "children2"
);

export type PlasmicLinkpage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"header">;
  logoText?: p.Flex<typeof LogoText>;
  headerSearchBar?: p.Flex<typeof HeaderSearchBar>;
  headerButtonAreaBig?: p.Flex<"div">;
  headerButtonAreaMobile?: p.Flex<"div">;
  headerMenuButton?: p.Flex<typeof HeaderMenuButton>;
  hero?: p.Flex<"div">;
  body?: p.Flex<"div">;
  contentAboutus?: p.Flex<typeof ContentAboutus>;
};

export interface DefaultLinkpageProps {
  children?: React.ReactNode;
  children2?: React.ReactNode;
  className?: string;
}

function PlasmicLinkpage__RenderFunc(props: {
  variants: PlasmicLinkpage__VariantsArgs;
  args: PlasmicLinkpage__ArgsType;
  overrides: PlasmicLinkpage__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div className={classNames(defaultcss.all, sty.box__s3M1K)}>
            <header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(defaultcss.all, sty.header)}
            >
              <LogoText
                data-plasmic-name={"logoText"}
                data-plasmic-override={overrides.logoText}
                className={classNames("__wab_instance", sty.logoText)}
              />

              <div className={classNames(defaultcss.all, sty.box__xckhv)}>
                <HeaderSearchBar
                  data-plasmic-name={"headerSearchBar"}
                  data-plasmic-override={overrides.headerSearchBar}
                  className={classNames("__wab_instance", sty.headerSearchBar)}
                />
              </div>

              {(
                hasVariant(globalVariants, "screen", "bigScreensOnly")
                  ? true
                  : false
              ) ? (
                <div
                  data-plasmic-name={"headerButtonAreaBig"}
                  data-plasmic-override={overrides.headerButtonAreaBig}
                  className={classNames(
                    defaultcss.all,
                    sty.headerButtonAreaBig
                  )}
                >
                  {(
                    hasVariant(globalVariants, "screen", "bigScreensOnly")
                      ? true
                      : true
                  ) ? (
                    <p.PlasmicSlot
                      defaultContents={
                        <React.Fragment>
                          <HeaderButton
                            className={classNames(
                              "__wab_instance",
                              sty.headerButton__gmcIj
                            )}
                          >
                            {"Contacto"}
                          </HeaderButton>

                          <HeaderButton
                            className={classNames(
                              "__wab_instance",
                              sty.headerButton__urQpL
                            )}
                          >
                            {"FAQ"}
                          </HeaderButton>

                          <HeaderButton
                            className={classNames(
                              "__wab_instance",
                              sty.headerButton__svgox
                            )}
                          >
                            <div
                              className={classNames(
                                defaultcss.all,
                                defaultcss.__wab_text,
                                sty.box__fpTzx
                              )}
                            >
                              {"Button text"}
                            </div>
                          </HeaderButton>

                          <HeaderButton
                            className={classNames(
                              "__wab_instance",
                              sty.headerButton___36VMe
                            )}
                          >
                            {"Sobre nosotros"}
                          </HeaderButton>

                          <HeaderButton
                            className={classNames(
                              "__wab_instance",
                              sty.headerButton__afD99
                            )}
                          >
                            {"Suscribete"}
                          </HeaderButton>
                        </React.Fragment>
                      }
                      value={args.children}
                    />
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "bigScreensOnly")
                  ? false
                  : true
              ) ? (
                <div
                  data-plasmic-name={"headerButtonAreaMobile"}
                  data-plasmic-override={overrides.headerButtonAreaMobile}
                  className={classNames(
                    defaultcss.all,
                    sty.headerButtonAreaMobile
                  )}
                >
                  <p.PlasmicSlot
                    defaultContents={
                      <HeaderMenuButton
                        data-plasmic-name={"headerMenuButton"}
                        data-plasmic-override={overrides.headerMenuButton}
                        className={classNames(
                          "__wab_instance",
                          sty.headerMenuButton
                        )}
                      />
                    }
                    value={args.children2}
                  />
                </div>
              ) : null}
            </header>

            <div
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(defaultcss.all, sty.hero)}
            />

            <div
              data-plasmic-name={"body"}
              data-plasmic-override={overrides.body}
              className={classNames(defaultcss.all, sty.body)}
            >
              <ContentAboutus
                data-plasmic-name={"contentAboutus"}
                data-plasmic-override={overrides.contentAboutus}
                className={classNames("__wab_instance", sty.contentAboutus)}
              />
            </div>

            <footer className={classNames(defaultcss.all, sty.footer__anrBz)}>
              <Footer
                className={classNames("__wab_instance", sty.footer__bwtNc)}
              />
            </footer>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "logoText",
    "headerSearchBar",
    "headerButtonAreaBig",
    "headerButtonAreaMobile",
    "headerMenuButton",
    "hero",
    "body",
    "contentAboutus"
  ],
  header: [
    "header",
    "logoText",
    "headerSearchBar",
    "headerButtonAreaBig",
    "headerButtonAreaMobile",
    "headerMenuButton"
  ],
  logoText: ["logoText"],
  headerSearchBar: ["headerSearchBar"],
  headerButtonAreaBig: ["headerButtonAreaBig"],
  headerButtonAreaMobile: ["headerButtonAreaMobile", "headerMenuButton"],
  headerMenuButton: ["headerMenuButton"],
  hero: ["hero"],
  body: ["body", "contentAboutus"],
  contentAboutus: ["contentAboutus"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "header";
  logoText: typeof LogoText;
  headerSearchBar: typeof HeaderSearchBar;
  headerButtonAreaBig: "div";
  headerButtonAreaMobile: "div";
  headerMenuButton: typeof HeaderMenuButton;
  hero: "div";
  body: "div";
  contentAboutus: typeof ContentAboutus;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLinkpage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicLinkpage__VariantsArgs;
  args?: PlasmicLinkpage__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicLinkpage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicLinkpage__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLinkpage__ArgProps,
      internalVariantPropNames: PlasmicLinkpage__VariantProps
    });

    return PlasmicLinkpage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLinkpage";
  } else {
    func.displayName = `PlasmicLinkpage.${nodeName}`;
  }
  return func;
}

export const PlasmicLinkpage = Object.assign(
  // Top-level PlasmicLinkpage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    logoText: makeNodeComponent("logoText"),
    headerSearchBar: makeNodeComponent("headerSearchBar"),
    headerButtonAreaBig: makeNodeComponent("headerButtonAreaBig"),
    headerButtonAreaMobile: makeNodeComponent("headerButtonAreaMobile"),
    headerMenuButton: makeNodeComponent("headerMenuButton"),
    hero: makeNodeComponent("hero"),
    body: makeNodeComponent("body"),
    contentAboutus: makeNodeComponent("contentAboutus"),

    // Metadata about props expected for PlasmicLinkpage
    internalVariantProps: PlasmicLinkpage__VariantProps,
    internalArgProps: PlasmicLinkpage__ArgProps
  }
);

export default PlasmicLinkpage;
/* prettier-ignore-end */
